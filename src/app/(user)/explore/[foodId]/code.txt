"use client";
import React, { useState } from "react";
import Image from "next/image";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { getImageUrl } from "@/lib/constants";
import { FaRegEdit, FaRegTrashAlt } from "react-icons/fa";
import { useUpdateRateFeedbackMutation, useDeleteRateFeedbackMutation } from "@/redux/services/ratefeedback";
import { useGetUserProfileQuery } from "@/redux/services/user";
import Loading from "@/components/loading/Loading";
import { RiCloseLargeLine } from "react-icons/ri";

export type CommentatorType = {
    username: string;
    profileImage: string;
    userId: number;
};

export type CommentDataType = {
    feedbackId: number;
    commentator: CommentatorType;
    comment: string;
    feedbackDate: string;
    ratingValue?: string;
};

export const CommentComponent: React.FC<{
    commentData: CommentDataType;
    onCommentUpdated?: () => void;
    onCommentDeleted?: () => void;
}> = ({ commentData, onCommentUpdated, onCommentDeleted }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [editedComment, setEditedComment] = useState(commentData.comment);
    const [selectedRate, setSelectedRate] = useState(commentData.ratingValue || "FIVE");
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [confirmType, setConfirmType] = useState<string | null>(null);
    const [showFullComment, setShowFullComment] = useState(false);
    const maxCommentLength = 100; // Characters to show before truncation

    const [updateFeedback, { isLoading }] = useUpdateRateFeedbackMutation();
    const [deleteFeedback] = useDeleteRateFeedbackMutation();
    const { data: userProfile } = useGetUserProfileQuery();

    // Check if comment needs truncation
    const needsTruncation = commentData.comment.length > maxCommentLength;
    const displayedComment = showFullComment
        ? commentData.comment
        : needsTruncation
            ? `${commentData.comment.substring(0, maxCommentLength)}...`
            : commentData.comment;

    const handleEditClick = () => {
        setIsEditing(true);
        setEditedComment(commentData.comment);
        setSelectedRate(commentData.ratingValue || "FIVE");
    };

    const handleCancelEdit = () => {
        setIsEditing(false);
    };

    const handleUpdateSubmit = async () => {
        try {
            const ratingMap = {
                "ONE": 1,
                "TWO": 2,
                "THREE": 3,
                "FOUR": 4,
                "FIVE": 5
            };
            await updateFeedback({
                id: commentData.feedbackId,
                ratingValue: ratingMap[selectedRate as keyof typeof ratingMap].toString(),
                commentText: editedComment
            }).unwrap();

            toast.success("បានកែមតិរួចរាល់");
            setIsEditing(false);
            onCommentUpdated?.();
        } catch (error) {
            toast.error("កំហុសក្នុងការកែមតិ");
            console.error("Update error:", error);
        }
    };

    const handleDeleteClick = () => {
        setConfirmType('delete');
        setShowConfirmation(true);
    };

    const handleRateClick = (index: number) => {
        const ratingValue = ["ONE", "TWO", "THREE", "FOUR", "FIVE"][index - 1];
        setSelectedRate(ratingValue);
    };

    const handleCancel = () => {
        setShowConfirmation(false);
        setConfirmType(null);
    };

    const handleConfirm = async () => {
        if (confirmType === 'delete') {
            try {
                await deleteFeedback({ id: commentData.feedbackId }).unwrap();
                toast.success("បានលុបមតិរួចរាល់");
                setShowConfirmation(false);
                onCommentDeleted?.();
            } catch (error) {
                toast.error("កំហុសក្នុងការលុបមតិ");
                console.error("Delete error:", error);
            }
        }
    };

    const timeAgo = (feedbackDate: string): string => {
        const previous = new Date(feedbackDate);
        const current = new Date();
        const currentUTC = new Date(current.getTime() + current.getTimezoneOffset() * 60000);

        if (isNaN(previous.getTime())) {
            return "មុននេះបន្តិច";
        }

        const diff = currentUTC.getTime() - previous.getTime();
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) return `${days} ថ្ងៃមុន`;
        if (hours > 0) return `${hours} ម៉ោងមុន`;
        if (minutes > 0) return `${minutes} នាទីមុន`;
        return "មុននេះបន្តិច";
    };

    // Check if current user is the comment owner
    const isOwner = userProfile?.payload?.id === commentData.commentator.userId;

    return (
        <>
            <main className="w-full p-4 bg-white rounded-lg shadow-md mb-4">
                <article className="flex items-center space-x-4">
                    <div
                        className="w-10 h-10 sm:w-14 sm:h-14 border rounded-full bg-cover bg-center flex-shrink-0"
                        style={{
                            backgroundImage: `url(${
                                commentData.commentator.profileImage === "default.jpg"
                                    ? "/man.png"
                                    : getImageUrl(commentData.commentator.profileImage)
                            })`,
                        }}
                    />
                    <div className="flex flex-col w-full">
                        <div className="flex justify-between items-center">
                            <p className="text-secondary font-medium">
                                {commentData.commentator.username}
                            </p>
                            <p className="text-gray-400 text-sm">
                                {timeAgo(commentData.feedbackDate)}
                            </p>
                        </div>

                        {isEditing ? (
                            <>
                                <div className="flex gap-1 my-2">
                                    {[1, 2, 3, 4, 5].map((index) => (
                                        <label key={`edit-star-${index}`}>
                                            <input
                                                className="hidden"
                                                type="radio"
                                                name="edit-rating"
                                                value={index}
                                                checked={index === ["ONE", "TWO", "THREE", "FOUR", "FIVE"].indexOf(selectedRate) + 1}
                                                onChange={() => handleRateClick(index)}
                                            />
                                            <Image
                                                className="cursor-pointer"
                                                width={21}
                                                height={21}
                                                src={index <= ["ONE", "TWO", "THREE", "FOUR", "FIVE"].indexOf(selectedRate) + 1
                                                    ? "/icons/star2.svg"
                                                    : "/icons/Star-noFill.svg"}
                                                alt={`Star ${index}`}
                                            />
                                        </label>
                                    ))}
                                </div>
                                <input
                                    type="text"
                                    className="focus:border-b-2 focus:outline-none border-b-2 w-full pb-4 focus:pb-0 active:border-none bg-white text-color-2"
                                    value={editedComment}
                                    onChange={(e) => setEditedComment(e.target.value)}
                                />
                                <div className="flex justify-end gap-2 mt-2">
                                    <button
                                        className="px-3 py-1 text-primary rounded-lg border border-primary"
                                        onClick={handleCancelEdit}
                                    >
                                        បោះបង់
                                    </button>
                                    <button
                                        className="px-3 py-1 bg-primary text-white rounded-lg disabled:opacity-50"
                                        onClick={handleUpdateSubmit}
                                        disabled={isLoading}
                                    >
                                        {isLoading ? <Loading/> : "រក្សាទុក"}
                                    </button>
                                </div>
                            </>
                        ) : (
                            <>
                                <p className="w-full text-color-2 mt-1">
                                    {displayedComment}
                                    {needsTruncation && !showFullComment && (
                                        <button
                                            onClick={() => setShowFullComment(true)}
                                            className="text-primary ml-1 hover:underline"
                                        >
                                            ជាច្រើនទៀត
                                        </button>
                                    )}
                                </p>
                                {isOwner && (
                                    <div className="flex gap-3 justify-end items-center mt-2">
                                        <FaRegEdit className="w-4 h-4 cursor-pointer text-gray-400" onClick={handleEditClick} />
                                        <FaRegTrashAlt
                                            className="w-4 h-4 cursor-pointer text-red-500"
                                            onClick={handleDeleteClick}
                                        />
                                    </div>
                                )}
                            </>
                        )}
                    </div>
                </article>
            </main>

            {showConfirmation && (
                <section className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
                    <div className="bg-white w-[310px] p-5 rounded-lg shadow-lg">
                        <div className="flex justify-end">
                            <button
                                onClick={handleCancel}
                                className="text-h4 text-slate-400 hover:shadow-custome"
                            >
                                <RiCloseLargeLine />
                            </button>
                        </div>
                        <article className="flex gap-2 items-center justify-center text-center">
                            <h1 className={"mb-3 text-h4 font-semibold leading-5 font-moulpali text-secondary lg:text-h3"}>លុបការបញ្ជេញមតិ</h1>
                        </article>
                        <p className="mt-2 text-sm leading-4 text-slate-600 flex justify-center">
                            <Image
                                src="/icons/Kbach.svg"
                                alt="border"
                                width={100}
                                height={13}
                            />
                        </p>
                        <h2 className="text-lg font-kantumruy py-4">
                            {confirmType === 'suspend'
                                ? ''
                                : ' តើអ្នកចង់លុបមតិរបស់អ្នកមែនទេ?'}
                        </h2>
                        <div className="flex justify-end gap-4">
                            <button
                                onClick={handleCancel}
                                className="px-4 rounded-lg py-2 text-primary border border-amber-300 hover:bg-primary hover:text-white"
                            >
                                ទេ
                            </button>
                            <button
                                onClick={handleConfirm}
                                className="px-4 py-2 bg-secondary text-white rounded-lg"
                                disabled={isLoading}
                            >
                                {isLoading ? <Loading/> : 'បញ្ជាក់'}
                            </button>
                        </div>
                    </div>
                </section>
            )}
            <ToastContainer />
        </>
    );
};


"use client";
import React, {useState} from "react";
import Image from "next/image";
import {toast, ToastContainer} from "react-toastify";
import { useParams } from "next/navigation";
import {useGetDetailFoodByIdQuery} from "@/redux/services/guest";
import {useGetRateFeedbackQuery, usePostRateFeedbackMutation} from "@/redux/services/ratefeedback";
import {CommentComponent} from "@/app/(user)/explore/components/CommentComponent";
import {convertRomanToKhmer, getImageUrl, } from "@/lib/constants";
import StarRating from "@/app/(user)/explore/components/recipeListUi/StarRating";
import {useGetUserProfileQuery} from "@/redux/services/user";
import Loading from "@/components/loading/Loading";

export default function FoodDetailPage() {
    const params = useParams();
    const foodId = params?.foodId as string;

    const { data: users } = useGetUserProfileQuery();
    const photoFileName = getImageUrl(users?.payload?.profileImage);
    const [isSubmitting, setIsSubmitting] = useState(false);

    // get food detail by id
    const {
        data: foodData,
        isLoading,
        isError,
        refetch: refetchFoodDetails
    } = useGetDetailFoodByIdQuery(
        { id: Number(foodId) },
        { skip: !foodId }
    );
    // get feedback by food id
    const {
        data: feedbackData,
        refetch: refetchFeedback
    } = useGetRateFeedbackQuery(
        { id: Number(foodId) },
        {
            skip: !foodId,
            refetchOnMountOrArgChange: true
        }
    );

    const handleCommentUpdated = async () => {
        await Promise.all([
            refetchFoodDetails(),
            refetchFeedback()
        ]);
    };

    const handleCommentDeleted = async () => {
        await Promise.all([
            refetchFoodDetails(),
            refetchFeedback()
        ]);
    };
    // Post feedback mutation
    const [postFeedback] = usePostRateFeedbackMutation();

    // Transform food data
    const foodDetail = foodData?.payload ? {
        foodImage: foodData.payload.photo[0]?.photo || '',
        foodName: foodData.payload.name,
        foodDescription: foodData.payload.description,
        durationInMinutes: foodData.payload.durationInMinutes,
        foodLevel: foodData.payload.level,
        sellerInfo: {
            username: foodData.payload.user?.fullName || 'Unknown',
            userId: foodData.payload.user?.id || 0
        },
        starAverage: foodData.payload.averageRating || 0,
        totalRater: foodData.payload.totalRaters || 0
    } : null;

    // Local state
    const [selectedRate, setSelectedRate] = useState<string>();
    const [num] = useState(1);
    const [rated, setRated] = useState(false);
    const [newFeedback, setNewFeedback] = useState("");


    // Background color mapping for levels
    // const bgColor = levelBgColors;
    //
    // console.log("test", foodData?.payload.level);
    // // // Get the corresponding background color class
    // const levelClass = bgColor[ foodData?.payload?.level || "Easy"] || "bg-gray-100 text-gray-800";
    type DifficultyLevel = "Easy" | "Medium" | "Hard";

    const levelStyles: Record<DifficultyLevel, { bg: string; text: string }> = {
        Easy: {
            bg: "bg-[#fff9eb]",
            text: "text-primary",
        },
        Medium: {
            bg: "bg-[#f5f3ff]",
            text: "text-[#713aed]",
        },
        Hard: {
            bg: "bg-[#fef2f3]",
            text: "text-[#ff2323]",
        },
    };

    // In your component, ensure the level is typed
    const level = (foodData?.payload?.level as DifficultyLevel) || "Easy";
    const { bg: levelBg, text: levelText } = levelStyles[level];

    if (isLoading) {
        return <div className="w-full h-screen flex items-center justify-center">Loading...</div>;
    }

    if (isError || !foodDetail) {
        return <div className="w-full h-screen flex items-center justify-center">Error loading food details</div>;
    }


    const handleRateClick = async (index: number) => {
        const ratingValue = ["ONE", "TWO", "THREE", "FOUR", "FIVE"][index - 1];
        setSelectedRate(ratingValue);
        toast.success("អ្នកបានវាយតម្លៃរួចហើយ");
        setRated(true);
    };

    // Then modify your handlePostFeedback function:
    const handlePostFeedback = async () => {
        if (!selectedRate) {
            toast.error("សូមជ្រើសរើសពិន្ទុវាយតម្លៃ");
            return;
        }
        if (!newFeedback.trim()) {
            toast.error("សូមបញ្ចូលមតិយោបល់");
            return;
        }

        try {
            setIsSubmitting(true);
            const ratingMap = {
                "ONE": 1,
                "TWO": 2,
                "THREE": 3,
                "FOUR": 4,
                "FIVE": 5
            };
            const numericRating = ratingMap[selectedRate as keyof typeof ratingMap];

            await postFeedback({
                foodId: Number(foodId),
                ratingValue: numericRating.toString(),
                commentText: newFeedback
            }).unwrap();

            await Promise.all([
                refetchFoodDetails(),
                refetchFeedback()
            ]);

            toast.success("បានប្រគល់មតិរួចរាល់");
            setNewFeedback("");
            setSelectedRate(undefined);
            setRated(false); // Reset the rated state
        } catch (error) {
            toast.error("កំហុសក្នុងការប្រគល់មតិ");
            console.error("Failed to post feedback:", error);
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <>
            <ToastContainer
                position="top-center"
                autoClose={5000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="light"
            />
            <div className="w-full flex flex-col justify-center pt-5 items-center gap-5">
                {/* Food Detail Section */}
                <div className="bg-white shadow-sm rounded-lg lg:h-[460px] lg:w-[85%] md:h-96 md:w-full h-1/2 w-[90%] px-1">
                    <div className="grid lg:grid-cols-2 md:grid-cols-2 grid-cols-1 p-4 h-full gap-x-4">
                        <div className="m-1 w-full h-[200px] sm:h-full rounded-md relative overflow-hidden">
                            <Image
                                src={foodDetail.foodImage ? getImageUrl(foodDetail.foodImage) : '/assets/banner-dashboard.png'}
                                alt={foodDetail.foodName}
                                fill
                                className="object-cover"
                                priority={true}
                                sizes="(max-width: 640px) 100vw, 50vw"
                                unoptimized={true}
                                onError={(e) => {
                                    const target = e.target as HTMLImageElement;
                                    target.src = '/assets/banner-dashboard.png';
                                    target.onerror = null;
                                }}
                            />
                        </div>
                        <div className="w-full flex flex-col gap-4 justify-between">
                            <div>
                                <div className="flex justify-between">
                                    <h2 className="text-2xl text-black font-kantumruy font-medium">
                                        {foodDetail.foodName}
                                    </h2>
                                    <div className="flex items-center gap-2 text-h3">
                                        <svg
                                            width="13"
                                            height="13"
                                            viewBox="0 0 13 13"
                                            fill="none"
                                            xmlns="http://www.w3.org/2000/svg"
                                        >
                                            <path
                                                d="M6.5 0C5.64641 0 4.80117 0.168127 4.01256 0.494783C3.22394 0.821439 2.50739 1.30023 1.90381 1.90381C0.684819 3.12279 0 4.77609 0 6.5C0 8.22391 0.684819 9.87721 1.90381 11.0962C2.50739 11.6998 3.22394 12.1786 4.01256 12.5052C4.80117 12.8319 5.64641 13 6.5 13C8.22391 13 9.87721 12.3152 11.0962 11.0962C12.3152 9.87721 13 8.22391 13 6.5C13 5.64641 12.8319 4.80117 12.5052 4.01256C12.1786 3.22394 11.6998 2.50739 11.0962 1.90381C10.4926 1.30023 9.77606 0.821439 8.98744 0.494783C8.19883 0.168127 7.35359 0 6.5 0ZM9.23 9.23L5.85 7.15V3.25H6.825V6.63L9.75 8.385L9.23 9.23Z"
                                                fill="#FFD233"
                                            />
                                        </svg>
                                        <span>{convertRomanToKhmer((num * foodDetail.durationInMinutes).toString())} នាទី</span>
                                    </div>
                                </div>

                                <div className="flex flex-col gap-7 pt-5">
                                    {/* Admin Info */}
                                    <div className="w-full h-auto sm:h-20 bg-gray-50 rounded-lg grid grid-cols-1 sm:grid-cols-3 p-2 gap-4 sm:gap-0">
                                        {/* Row 1 - Creator Info (full width on mobile, spans 2 cols on desktop) */}
                                        <div className="flex items-center gap-2 sm:col-span-2">
                                            <div className="flex items-center gap-2">
                                                <Image
                                                    width={20}
                                                    height={20}
                                                    src="/icons/flower2.svg"
                                                    alt="flower"
                                                    className="flex-shrink-0"
                                                />
                                                <p className="text-secondary font-medium whitespace-nowrap">បង្កើតដោយ</p>
                                            </div>
                                            <p className="truncate">{foodDetail.sellerInfo.username}</p>
                                        </div>

                                        {/* Row 2 - Rating (full width on mobile, last col on desktop) */}
                                        <div className="flex flex-row justify-start sm:justify-end items-center">
                                            <StarRating starAverage={Number(foodDetail.starAverage)} />
                                            <p className="text-black font-medium pl-1">
                                                {convertRomanToKhmer(Number(foodDetail.starAverage).toFixed(1))}
                                            </p>
                                        </div>

                                        {/* Row 3 - Rater count (always full width) */}
                                        <div className="flex justify-start sm:justify-end text-[14px] text-black col-span-1 sm:col-span-3">
                                            ផ្អែកលើចំនួន {convertRomanToKhmer(foodDetail.totalRater.toString())} នាក់នៃការវាយតម្លៃ
                                        </div>
                                    </div>

                                    {/* Description */}
                                    <div className="flex gap-2">
                                        <Image width={20} height={20} src="/icons/flower2.svg" alt="flower" />
                                        <p className="text-secondary">អំពីមុខម្ហូប</p>
                                    </div>
                                    <p className="text-black ps-8">{foodDetail.foodDescription}</p>
                                </div>
                            </div>
                            {/*level*/}
                            <div className="card-actions flex flex-row items-center justify-end">
                                <div
                                    className={`badge rounded-[8px] border-none py-[1px] px-2 text-[13px] font-medium ${levelBg} ${levelText}`}
                                >
                                    {level}
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                {/*card food related*/}
                <div className="bg-white rounded-md p-4 w-[90%] md:w-full lg:w-[85%]">
                    <div className="flex p-4">
                        <Image
                            width={20}
                            height={20}
                            src="/icons/flower2.svg"
                            alt="flower"
                        />
                        <p className="text-[18px] pl-2 text-black font-medium ">
                            ម្ហូបទាំងអស់របស់
                            <span className="text-secondary font-medium ps-4">
                                Recommendation
                              </span>
                        </p>
                    </div>
                </div>

                {/* Feedback Section */}
                <div className="bg-white rounded-lg w-[90%] md:w-full lg:w-[85%]">
                    <h2 className="text-black text-[18px] font-medium px-5 py-8">បញ្ចេញមតិ</h2>

                    <div className="w-full px-5 flex flex-col justify-start">
                        {/* Rating */}
                        <div className="flex gap-2 px-5 pb-5">
                            <Image width={20} height={20} src="/icons/flower2.svg" alt="flower" />
                            <p className="text-secondary">វាយតម្លៃ</p>
                            <div className="pl-1 flex gap-1">
                                {[...Array(5)].map((_, index) => (
                                    <label key={`star-${index}`}>
                                        <input
                                            className="hidden"
                                            type="radio"
                                            name="rating"
                                            value={index + 1}
                                            disabled={rated}
                                            onClick={() => handleRateClick(index + 1)}
                                        />
                                        <Image
                                            className="cursor-pointer"
                                            width={21}
                                            height={21}
                                            src={
                                                index < (selectedRate ? ["ONE", "TWO", "THREE", "FOUR", "FIVE"].indexOf(selectedRate) + 1 : 0)
                                                    ? "/icons/star2.svg"
                                                    : "/icons/Star-noFill.svg"
                                            }
                                            alt={`Star ${index + 1}`}
                                        />
                                    </label>
                                ))}
                            </div>
                        </div>
                        <div className="flex gap-3 justify-start">
                            <div className="flex gap-2">
                                <div
                                    className="w-10 h-10 rounded-full bg-cover bg-center"
                                    style={{ backgroundImage: `url(${photoFileName || "/man.png"})` }}
                                ></div>
                            </div>

                            <input
                                className="focus:border-b-2 focus:outline-none border-b-2 w-full pb-4 focus:pb-0 active:border-none dark:bg-white text-color-2"
                                placeholder="បញ្ចូលមតិ..."
                                type="text"
                                value={newFeedback}
                                onChange={(e) => setNewFeedback(e.target.value)}
                            />
                        </div>
                        <div className="w-full flex justify-end pt-5">
                            <button
                                onClick={handlePostFeedback}
                                className="bg-primary py-2 px-5 rounded-lg text-white"
                                disabled={isSubmitting}
                            >
                                {isSubmitting ? <Loading/> : "ផ្តល់មតិ"}
                            </button>
                        </div>
                    </div>

                    {/* Feedback List */}
                    <div className="w-full px-5 pb-5">
                        {feedbackData?.payload?.map((comment: any) => (
                            <CommentComponent
                                key={comment.feedbackId}
                                commentData={{
                                    commentator: {
                                        username: comment.user.fullName,
                                        profileImage: comment.user.profileImage === "default.jpg"
                                            ? "/man.png"
                                            : comment.user.profileImage,
                                        userId: comment.user.id
                                    },
                                    feedbackId: comment.feedbackId,
                                    comment: comment.commentText,
                                    feedbackDate: comment.createdAt,
                                    ratingValue: comment.ratingValue
                                }}
                                onCommentUpdated={handleCommentUpdated}
                                onCommentDeleted={handleCommentDeleted}
                            />
                        ))}
                    </div>
                </div>
            </div>
        </>
    );
}